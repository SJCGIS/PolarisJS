<!DOCTYPE html>
<html> 
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=7, IE=9, IE=10">
    <!--The viewport meta tag is used to improve the presentation and behavior of the samples 
    on iOS devices-->
    <meta name="viewport" content="initial-scale=1, maximum-scale=1,user-scalable=no">
    <title>Identify with Popup</title>

    <link rel="stylesheet" href="http://serverapi.arcgisonline.com/jsapi/arcgis/3.5/js/esri/css/esri.css">
    <style>
    html, body, #map {
      height:100%;
      width:100%;
      margin:0;
      padding:0;
    }
    </style>

    <script>var dojoConfig = { parseOnLoad: true };</script>
    <script src="http://serverapi.arcgisonline.com/jsapi/arcgis/3.5/"></script>
    <script>  

    dojo.require("esri.map");
    dojo.require("esri.dijit.Popup");
    
    var map;
    var identifyTask, identifyParams;
    var queryTask, symbol, popup
    
    function init() {
      //set fillSymbol for identify and query tasks
      symbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255,0,0]), 2), new dojo.Color([255,255,0,0.25]));
      //setup the popup window 
      popup = new esri.dijit.Popup({
        fillSymbol: symbol
      }, dojo.create("div"));
      
      var mapExtent = new esri.geometry.Extent(1053827.68909551,515293.874014814,1185179.1932883,666710.730399649,
                                               new esri.SpatialReference(2285));
      
      map = new esri.Map("map", {
        extent: mapExtent,
        infoWindow: popup
      });

      dojo.connect(map, "onLoad", mapReady);
      
      var demLayer = new esri.layers.ArcGISTiledMapServiceLayer("http://sjcgis.org/Polaris/rest/services/DEM/MapServer");
      var aerialsLayer = new esri.layers.ArcGISTiledMapServiceLayer("http://sjcgis.org/Polaris/rest/services/New_Aerial1/MapServer");
      var mapContents = new esri.layers.ArcGISDynamicMapServiceLayer("http://sjcgis.org/Polaris/rest/services/Map_Contents/MapServer");
      
      map.addLayers([aerialsLayer,demLayer,mapContents]);
    }
    
    function mapReady(map){
      dojo.connect(map,"onClick",executeIdentifyTask);

      //construct query task
      queryTask = new esri.tasks.QueryTask("http://sjcgis.org/Polaris/rest/services/Map_Contents/MapServer/8");
      query = new esri.tasks.Query();
      query.returnGeometry = true;
      query.outFields = ["*"];

      //pass the URL parameters
      var urlObject = esri.urlToObject(document.location.href);
      if (urlObject.query) {
        P = urlObject.query.parcel;

        //construct the query based on the parameters
        var selection = "PIN = '" + P + "'";
        query.where = selection;
        
        //execute the query
        queryTask.execute(query,showResults);

      }

      //create identify tasks and setup parameters 
      identifyTask = new esri.tasks.IdentifyTask("http://sjcgis.org/Polaris/rest/services/Map_Contents/MapServer");
      
      identifyParams = new esri.tasks.IdentifyParameters();
      identifyParams.tolerance = 3;
      identifyParams.returnGeometry = true;
      identifyParams.layerIds = [1,8,9,27,36];
      identifyParams.layerOption = esri.tasks.IdentifyParameters.LAYER_OPTION_VISIBLE;
      identifyParams.width  = map.width;
      identifyParams.height = map.height;
    }

    function showResults(featureSet) {
      map.graphics.clear();
      map.infoWindow.hide();

      var resultFeatures = featureSet.features;

      for (var i=0, il=resultFeatures.length; i<il; i++) {
        var graphic = resultFeatures[i];
        graphic.setSymbol(symbol);
        graphic.setInfoTemplate(new esri.InfoTemplate("${layername}", "${*}"));
        map.graphics.add(graphic);
      }

      //zoom to extent of the graphics
      var myFeatureExtent = esri.graphicsExtent(resultFeatures);
      map.setExtent(myFeatureExtent);
    }
    
    function executeIdentifyTask(evt) {
      identifyParams.geometry = evt.mapPoint;
      identifyParams.mapExtent = map.extent;
      
      var deferred = identifyTask.execute(identifyParams);

      deferred.addCallback(function(response) {     
                                               // response is an array of identify result objects    
                                               // Let's return an array of features.
                                               return dojo.map(response, function(result) {
          var feature = result.feature;
          feature.attributes.layerName = result.layerName;
          var template = new esri.InfoTemplate();
          template.title = "${layerName}";
          if (result.layerName == 'Legal Parcels') {
            pin = "${PIN}";
            console.log(pin);
            template.content = "<h4>Available Links</h4><a href=http://sanjuanco.com/auditor/RecordSearch.aspx?pno=${PIN}>View Recorded Documents</a>";
          }
          else {
            var template = new esri.InfoTemplate("${layerName}", "${*}");
          }
          feature.setInfoTemplate(template);
          return feature;
        });
      });

      
      // InfoWindow expects an array of features from each deferred
      // object that you pass. If the response from the task execution 
      // above is not an array of features, then you need to add a callback
      // like the one above to post-process the response and return an
      // array of features.
      map.graphics.clear();
      map.infoWindow.setFeatures([ deferred ]);
      map.infoWindow.show(evt.mapPoint);
    }
    
    dojo.ready(init);
    </script>
  </head>
  
  <body>
    <div id="map"></div>
  </body>

</html>
